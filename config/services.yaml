# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.support_email: '%env(SUPPORT_EMAIL)%'
    app.example_enable: '%env(bool:EXAMPLE_ENABLE)%'
    cache_adapter: cache.adapter.memcached
    article_uploads: 'uploads/articles'
    article_uploads_url: '/%article_uploads%'
    article_uploads_dir: '%kernel.project_dir%/public/%article_uploads%'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            $isDebug: '%kernel.debug%'
            Demontpx\ParsedownBundle\Parsedown: '@demontpx_parsedown.parsedown'
            $slackUrl: '%env(SLACK_WEBHOOK_URL)%'

            League\Flysystem\FilesystemInterface $articleFileSystem: '@oneup_flysystem.uploads_articles_filesystem'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\MarkdownParser:
        arguments:
            $logger: '@monolog.logger.markdown'

    App\Service\ApiLogger:
        arguments:
            $logger: '@monolog.logger.api'

    app.article.words.filter:
        class: App\Service\ArticleWordsFilter

    app.registrtion.spam.filter:
        class: App\Service\RegistrationSpamFilter

    # Конфигурация серивса загрузки изображений для статей.
    # Для загрузки других изображений (например аватар пользователя),
    # необходимо сконфигурировать сервис с новым названием и входным параметром.
#    file_uploader.article:
#        class: App\Service\FileUploader
#        arguments:
#            $uploadPath: '%article_uploads_dir%'
